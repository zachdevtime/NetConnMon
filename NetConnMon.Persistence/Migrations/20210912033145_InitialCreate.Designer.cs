// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetConnMon.Persistence.DBContexts;

namespace NetConnMon.Persistence.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20210912033145_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("NetConnMon.Domain.Entities.EmailSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("SMTPPassword")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("SMTPUsername")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SmtpHost")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TextFormat")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseSSL")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EmailSettings");
                });

            modelBuilder.Entity("NetConnMon.Domain.Entities.TestDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("BackoffMaxSec")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("BackoffMinSec")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BackoffSec")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("BackoffStepSec")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CanConnect")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("CheckIntervalSec")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ConsequtiveErrorsBeforeDisconnected")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DownSince")
                        .HasColumnType("TEXT");

                    b.Property<long>("Errors")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastEmailed")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastErrorMsg")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastErrored")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("MinInterruptionSec")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Protocol")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RunningSince")
                        .HasColumnType("TEXT");

                    b.Property<uint>("SaveInterval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShouldEmailStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<uint>("TimeoutMSec")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpSince")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestDefinitions");
                });

            modelBuilder.Entity("NetConnMon.Domain.Entities.UpDownEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsecutiveErrors")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("TEXT");

                    b.Property<long>("Errors")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Heartbeats")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUpEvent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Started")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestDefinitionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestDefinitionId");

                    b.ToTable("UpDownEvent");
                });

            modelBuilder.Entity("NetConnMon.Domain.Entities.UpDownEvent", b =>
                {
                    b.HasOne("NetConnMon.Domain.Entities.TestDefinition", "TestDefinition")
                        .WithMany("Events")
                        .HasForeignKey("TestDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestDefinition");
                });

            modelBuilder.Entity("NetConnMon.Domain.Entities.TestDefinition", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
