 
@inject IDialogService DialogService
<EditForm Model="@model" OnValidSubmit="OnValidSubmitClick">
    <FluentValidationValidator />
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudSwitch Label="Disable this test" Class="mt-3"
                       @bind-Checked="@model.Disabled" Color="@DisableColorClass" />

            <MudSelect Label="Protocol" Class="mt-3" Disabled="@(model.Id > 0)" TextChanged="ProtocolChanged"
                       @bind-Value="@model.Protocol" For="@(() => model.Protocol)">
                @foreach (NetProtocol protocol in Enum.GetValues(typeof(NetProtocol)))
                {
                    <MudSelectItem T="NetProtocol" Value="@protocol">@protocol.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Label="Ip Address / Hostname" Class="mt-3" TextChanged="OnAddressChanged"
                          @bind-Value="@model.Address" For="@(() => model.Address)" />
            <MudTextField Label="Test name" Class="mt-3"
                          @bind-Value="@model.TestName" For="@(() => model.TestName)" />

            <MudTextField Label="Timeout (in milliSeconds)" Class="mt-3"
                          @bind-Value="model.TimeoutMSec" For="@(() => model.TimeoutMSec)" />

            <MudNumericField Label="Port" Class="mt-3" @bind-Value="model.Port" For="@(() => model.Port)"
                             Disabled="true" HelperText="Driven by the protocol chosen..." />
            <MudNumericField Label="Time between checks (in seconds)" Class="mt-3" @bind-Value="model.CheckIntervalSec"
                             For="@(() => model.CheckIntervalSec)" />
            <MudNumericField Label="Consecutive errors before considered disconnected" Class="mt-3"
                             @bind-Value="model.ConsequtiveErrorsBeforeDisconnected"
                             For="@(() => model.ConsequtiveErrorsBeforeDisconnected)" />
            <MudNumericField Label="Consecutive tests before saving" Class="mt-3"
                             @bind-Value="model.SaveInterval" For="@(() => model.SaveInterval)" />


            <MudSwitch Label="Should Email Status" Class="mt-3"
                       @bind-Checked="@model.ShouldEmailStatus" Color="Color.Primary" @onchange="OnToggleTimingOptions" />
            @if (model.ShouldEmailStatus)
            {
                <MudPaper Class="pa-4 ml-4">
                    <MudText Typo="Typo.subtitle2">Email Timings</MudText>

                    <MudNumericField Label="Seconds between connection going down and first email." Class="mt-3"
                                     @bind-Value="model.MinInterruptionSec" For="@(() => model.MinInterruptionSec)" />
                    <MudNumericField Label="Seconds before next email." Class="mt-3"
                                     @bind-Value="model.BackoffMinSec" For="@(() => model.BackoffMinSec)" />
                    <MudNumericField Label="Seconds before next email (step)." Class="mt-3"
                                     @bind-Value="model.BackoffStepSec" For="@(() => model.BackoffStepSec)" />
                    <MudNumericField Label="Seconds before next email (max)." Class="mt-3"
                                     @bind-Value="model.BackoffMaxSec" For="@(() => model.BackoffMaxSec)" />

                </MudPaper>
            }
        </MudCardContent>
        <MudCardActions>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Error"
                       OnClick="@DeleteModelClicked" Class="ml-auto">Delete</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" IconClass="@saveIcon" Class="ml-auto">Save</MudButton>
        </MudCardActions>
    </MudCard>

</EditForm>
    @code
{
        [Parameter]
        public TestDefinition model { get; set; } = new TestDefinition();
        [Parameter]
        public EventCallback OnDeleteConfirmed { get; set; }
        [Parameter]
        public EventCallback OnValidSubmit { get; set; }
        private Color DisableColorClass => (model?.Disabled ?? false) ? Color.Error : Color.Primary;
        private string saveIcon => creating ? Icons.Material.Filled.Create : Icons.Material.Filled.Update;
        private bool creating => !(model?.Id > 0);


        private void OnToggleTimingOptions()
        {
            StateHasChanged();
        }
        protected void ProtocolChanged(string netProtocol)
        {
            model.Protocol = Enum.Parse<NetProtocol>(netProtocol);
            model.TestName = model.DefaultTestNamePerPort();

            if (!string.IsNullOrEmpty(model.Address))
                model.TestName += $" {model.Address}";

            model.SetPortByProtocol();
        }
        protected void OnAddressChanged(string change)
        {
            model.Address = change;
            if (string.IsNullOrEmpty(model.TestName) || model.TestName.TrimEnd() == model.DefaultTestNamePerPort())
            {
                model.TestName = $"{model.DefaultTestNamePerPort()} {model.Address}";
            }
        }
        private bool deleteWasClicked = false;
        private async Task DeleteModelClicked(MouseEventArgs mouseEventArgs)
        {
            deleteWasClicked = true;
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you really want to delete this test? This process cannot be undone.");
            parameters.Add("ButtonText", "Delete");
            parameters.Add("Color", Color.Error);
            var dialog = DialogService.Show<ConfirmDialog>("Delete", parameters, options);
            var result = await dialog.Result;

            if (!result.Cancelled)
                await OnDeleteConfirmed.InvokeAsync();
        }
        private async Task OnValidSubmitClick(EditContext context)
        {
            if (deleteWasClicked)
                deleteWasClicked = false;
            else
                await OnValidSubmit.InvokeAsync();
        }
    }
